name: build-framework
on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  # core_build:
  #   runs-on: macos-13-xl
  #   steps:
  #     - name: Checkout actions
  #       uses: actions/checkout@v4
  #     - name: Run Fastlane
  #       uses: ./.github/composite-actions/fastlane
  #       with:
  #         lane: "build_framework"
  #         target: "SparkCore"

  # core_unit_tests:
  #   name: core_unit_tests
  #   needs: [core_build]
  #   runs-on: macos-13-xl
  #   env:
  #     target: SparkCore
  #   steps:
  #     - name: Checkout actions
  #       uses: actions/checkout@v4
  # - name: Run Sourcery
  #   uses: ./.github/composite-actions/sourcery
  # - name: Run Fastlane
  #   uses: ./.github/composite-actions/fastlane
  #   with:
  #     lane: "unit_tests"
  #     target: ${{ env.target }}
  # - name: Archive xcresult
  #   uses: ./.github/composite-actions/xcresult
  #   with:
  #     target: ${{ env.target }}

  core_snapshot_tests:
    name: core_snapshot_tests
    # needs: [core_build]
    runs-on: macos-13-xl
    steps:
      - name: Checkout actions
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check modified components
        run: |
          MODIFIED_FILES=$(git diff --name-only --diff-filter=MAR origin/${{ github.base_ref }} | grep -E 'core/Sources/Components/')
          echo "components_modified=$(if [ -n "$MODIFIED_FILES" ]; then echo true; else echo false; fi)" >> $GITHUB_ENV
          ALL_TESTS=$(./.github/composite-actions/scope/analyze_modified_files.sh "$MODIFIED_FILES")
          echo "NAME=$ALL_TESTS"
          echo "ALL_TESTS has been printed for debugging purposes."  
          echo "ALL_TESTS=$ALL_TESTS" >> $GITHUB_ENV
      - name: Run Sourcery
        if: env.components_modified == 'true'
        uses: ./.github/composite-actions/sourcery
      - name: Extract branch name
        if: env.components_modified == 'true'
        shell: bash
        run: echo "branch=$(echo ${GITHUB_HEAD_REF#refs/heads/})" >> $GITHUB_ENV
      - name: Run snapshots
        if: env.components_modified == 'true'
        uses: actions/checkout@v4
        with:
          repository: adevinta/spark-ios-snapshots
          ref: ${{ env.branch }}
          path: spark-ios-snapshots
      - name: Run Fastlane
        if: env.components_modified == 'true'
        uses: ./.github/composite-actions/fastlane
        with:
          lane: "unit_tests"
          only_testing: ${{ env.ALL_TESTS }}
          target: "SparkDemo"
      - name: Archive xcresult
        if: env.components_modified == 'true'
        uses: ./.github/composite-actions/xcresult
        with:
          target:
            "SparkCoreSnapshots"

            # echo "components_modified=$(if [ -n "$MODIFIED_FILES" ]; then echo true; else echo false; fi)" >> $GITHUB_ENV
      # - name: Analyze modified files and generate ALL_TESTS variable
      #   id: analyze-modified-files
      #   run: |
      #     # Run your script to generate ALL_TESTS variable
      #     ALL_TESTS=$(./.github/composite-actions/scope/analyze_modified_files.sh "$MODIFIED_FILES")
      #     echo "ALL_TESTS=$ALL_TESTS" >> $GITHUB_ENV
      # - name: Get list of modified test classes
      #   if: env.components_modified == 'true'
      #   run: |
      #     TEST_CLASSES=$(echo "$MODIFIED_FILES" | awk -F/ '/SnapshotTests.swift/ {print $NF}' | sed 's/.swift//g')
      #     ONLY_TESTING_ARG="--only-testing \"GTUITests/$(echo $TEST_CLASSES | tr '\n' ',' | sed 's/,$//')\""
      #     echo "Test classes to run: $TEST_CLASSES"
      #     echo "Fastlane argument: $ONLY_TESTING_ARG"
      #   shell: bash

  # build:
  #   needs: [core_build]
  #   runs-on: macos-13-xl
  #   steps:
  #     - name: Checkout actions
  #       uses: actions/checkout@v4
  #     - name: Run Fastlane
  #       uses: ./.github/composite-actions/fastlane
  #       with:
  #         lane: "build_framework"
  #         target: "Spark"

  # unit_tests:
  #   name: unit_tests
  #   needs: [build]
  #   runs-on: macos-13-xl
  #   env:
  #     target: Spark
  #   steps:
  #     - name: Checkout actions
  #       uses: actions/checkout@v4
  #     - name: Run Fastlane
  #       uses: ./.github/composite-actions/fastlane
  #       with:
  #         lane: "unit_tests"
  #         target: ${{ env.target }}
  #     - name: Archive xcresult
  #       uses: ./.github/composite-actions/xcresult
  #       with:
  #         target: ${{ env.target }}
