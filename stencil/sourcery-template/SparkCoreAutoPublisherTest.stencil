// swiftlint:disable all
 
import Foundation
import UIKit
import SwiftUI
import XCTest

{% for import in argument.autoMockableImports %}
import {{ import }}
{% endfor %}
{% for import in argument.autoMockableTestableImports %}
@testable import {{ import }}
{% endfor %}

{% macro expectedSinkCount variable %}expected{{ variable.name | upperFirstLetter }}SinkCount{% endmacro %}

{% for class in types.classes where class|annotated:"AutoPublisherTest" %}{% if class.name != "AutoPublisherTest" %}
final class {{ class.name }}PublisherTest {

    {% for key, value in class.annotations where key|contains: "<" and key|contains: ">" %}{% if forloop.first %}// MARK: - Type Alias

    {% endif %}
    typealias {{ key|replace:"<", ""|replace:">", "" }} = {{ value }}
    {% endfor %}

    // MARK: - Initialization

    private init(){
    }

    // MARK: - Tests

    {% for variable in class.allVariables|!definedInExtension where variable.readAccess != "private" and variable.attributes["Published"] != nil %}
        
    static func XCTSinksCount(
        {{ variable.name }} mock: PublisherMock<Published<{{ variable.typeName }}>.Publisher>,
        expectedNumberOfSinks: Int
    ) {
        XCTAssertPublisherSinkCountEqual(
            on: mock,
            expectedNumberOfSinks
        )
    }

    static func XCTAssert{% if class.annotations[variable.name] == "Identical" %}<
        Value: AnyObject
    >{% endif %}(
        {{ variable.name }} mock: PublisherMock<Published<{{ variable.typeName }}>.Publisher>,
        expectedNumberOfSinks: Int,
        expectedValue: {% if class.annotations[variable.name] == "Identical" %}Value{% if variable.isOptional %}?{% endif %}{% else %}{{ variable.typeName }}{% endif %}{% if variable.isOptional %} = nil{% endif %}
    ) {
        // Count
        XCTAssertPublisherSinkCountEqual(
            on: mock,
            expectedNumberOfSinks
        )

        // Value
        if expectedNumberOfSinks > 0 {
            {% if variable.isOptional %}if let expectedValue { {% endif %}
                {% if class.annotations[variable.name] == "Identical" %}
                XCTAssertPublisherSinkValueIdentical(
                    on: mock,
                    expectedValue
                )
                {% else %}
                XCTAssertPublisherSinkValueEqual(
                    on: mock,
                    expectedValue
                )
                {% endif %}
            {% if variable.isOptional %}
            } else {
                XCTAssertPublisherSinkValueNil(
                    on: mock
                )
            }
            {% endif %}
        }
    }

    {% endfor %}
}

{% endif %}{% endfor %}