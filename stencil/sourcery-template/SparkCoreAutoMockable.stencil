// swiftlint:disable all

import Foundation
import UIKit
import SwiftUI

{% for import in argument.autoMockableImports %}
import {{ import }}
{% endfor %}
{% for import in argument.autoMockableTestableImports %}
@testable import {{ import }}

{% macro GenericTestedParam GenericList paramName %}{% set paramV2 %}"{{paramName}}"{% endset %}{% if GenericList | contains: paramV2 %}Any{% else %}{{paramName}}{%endif%}{% endmacro %}
{% macro removeGenericContentInMethodName name %}{% if method.shortName| hasSuffix:">" %}{% for element in name|split:"<" %}{% if forloop.first %}{{ element }}{% endif %}{% endfor %}{% else %}{{name}}{% endif %}{% endmacro %}
{% macro swiftifyMethodNameV2 method %}{%if method.parameters.count > 0 %}{% call removeGenericContentInMethodName method.shortName %}With{% for param in method.parameters %}{{ param.name | snakeToCamelCase }}{% if not forloop.last %}And{% endif %}{% endfor %}{% else %}{{method.shortName}}{% endif %}{% endmacro %}
{% macro methodThrowableErrorDeclaration method %}
    var {% call swiftifyMethodNameV2 method %}ThrowableError: Error?
{% endmacro %}
{% macro methodThrowableErrorUsage method %}
        if let error = {% call swiftifyMethodNameV2 method %}ThrowableError {
            throw error
        }
{% endmacro %}
{% macro methodReceivedParameters method %}
{% if method.shortName| hasSuffix:">" %}
{% for element in method.shortName|replace:">",""|replace:" ",""|split:"<" %}
    {% if forloop.last %}
        {% set GenericParameters %}{{element|split:","}}{% endset %}
        {%if method.parameters.count == 1 %}
        {% call swiftifyMethodNameV2 method %}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }} = {{ param.name }}{% endfor %}
        {% call swiftifyMethodNameV2 method %}ReceivedInvocations.append({% for param in method.parameters %}{{ param.name }}){% endfor %}
        {% else %}
            {% if not method.parameters.count == 0 %}
        {% call swiftifyMethodNameV2 method %}ReceivedArguments = ({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %})
        {% call swiftifyMethodNameV2 method %}ReceivedInvocations.append(({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %}))
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
{% else %}
    {%if method.parameters.count == 1 %}
        {% call swiftifyMethodNameV2 method %}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }} = {{ param.name }}{% endfor %}
        {% call swiftifyMethodNameV2 method %}ReceivedInvocations.append({% for param in method.parameters %}{{ param.name }}){% endfor %}
    {% else %}
    {% if not method.parameters.count == 0 %}
        {% call swiftifyMethodNameV2 method %}ReceivedArguments = ({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %})
        {% call swiftifyMethodNameV2 method %}ReceivedInvocations.append(({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %}))
    {% endif %}
    {% endif %}
{% endif %}
{% endmacro %}
{% macro methodClosureName method %}_{% call swiftifyMethodNameV2 method %}{% endmacro %}
{% macro closureReturnTypeNameV2 method GenericParameters %}{% if method.returnTypeName.isVoid%} Void {% else %}Any?{% endif %}{% endmacro %}
{% macro closureReturnTypeName method %}{% if method.isOptionalReturnType %}({{ method.unwrappedReturnTypeName }})?{% else %}{{ method.returnTypeName }}{% endif %}{% endmacro %}

{% macro methodClosureDeclaration method %}
    var {% call methodClosureName method %}: (({% for param in method.parameters %}{% if param.typeName|contains:"any" and param.typeName|contains:"?" %}{{ param.typeName | replace:"any","(any" | replace:"?",")?" }}{%else%}{{ param.typeName }}{%endif%}{% if not forloop.last %}, {% endif %}{% endfor %}) {% if method.isAsync %}async {% endif %}{% if method.throws %}throws {% endif %}-> {% if method.isInitializer %}Void{% else %}{% call closureReturnTypeName method %}{% endif %})?
{% endmacro %}

{% macro methodClosureDeclarationV2 method GenericParameters %}
    var {% call methodClosureName method %}: (({% for param in method.parameters %}{% call GenericTestedParam GenericParameters param.typeName.unwrappedTypeName %}{%if param.typeName.isOptional%}?{%endif%}{% if not forloop.last %}, {% endif %}{% endfor %}) {% if method.throws %}throws {% endif %}-> {% if method.isInitializer %}Void{% else %}{% call closureReturnTypeNameV2 method GenericParameters %}{% endif %})?
{% endmacro %}
{% macro methodClosureCallParameters method %}{% for param in method.parameters %}{% if param.typeName.name| hasPrefix:"inout" %}&{% endif %}{{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro methodReturnValueDefaultValueMacro typeName %}{% if typeName.name == "Int" or typeName.name == "UInt" or typeName.name == "Double" or typeName.name == "Float" or typeName.name == "CGFloat" %} = 0{% elif typeName.name == "Bool" %} = false{% elif typeName.name == "String" %} = ""{% elif typeName.name == "UIViewController" or typeName.name == "UINavigationController" or typeName.name == "UIView" or typeName.name|hasPrefix:"PassthroughSubject<" or typeName.name|hasPrefix:"PassthroughRelay<" %} = .init(){% elif typeName.name == "URL" %} = .init(fileURLWithPath: ""){% elif typeName.name == "URLRequest" %} = .init(url: .init(fileURLWithPath: "")){% elif typeName.name|hasPrefix:"AnyPublisher<" %} = Empty().eraseToAnyPublisher(){% elif typeName.isArray %} = []{% elif typeName.isDictionary %} = [:]{% else %}!{% endif %}
{% endmacro %}
{% macro mockMethod method %}
    // MARK: - {{ method.shortName }}

{% if method.shortName| hasSuffix:">" %}
    {% for element in method.shortName|replace:">",""|replace:" ",""|split:"<" %}
        {% if forloop.last %}
            {% set GenericParameters %}{{element|split:","}}{% endset %}

            {% if method.throws %}
                {% call methodThrowableErrorDeclaration method %}
            {% endif %}
            {% if not method.isInitializer %}
    var {% call swiftifyMethodNameV2 method %}CallsCount = 0
    var {% call swiftifyMethodNameV2 method %}Called: Bool {
        return {% call swiftifyMethodNameV2 method %}CallsCount > 0
    }
            {% endif %}
            {% if method.parameters.count == 1 %}
    var {% call swiftifyMethodName method.selectorName %}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }}: ({{ '(' if param.isClosure }}{{ param.typeName.unwrappedTypeName }}{{ ')' if param.isClosure }})?{% endfor %}
    var {% call swiftifyMethodName method.selectorName %}ReceivedInvocations{% for param in method.parameters %}: [{%if param.typeName.isOptional%}({%endif%}{{ '(' if param.isClosure }}{{ param.typeName.unwrappedTypeName }}{{ ')' if param.isClosure }}{%if param.typeName.isOptional%})?{%endif%}]{% endfor %} = []

            {% elif not method.parameters.count == 0 %}
    var {% call swiftifyMethodNameV2 method %}ReceivedArguments: ({% for param in method.parameters %}{{ param.name }}: {% call GenericTestedParam GenericParameters param.unwrappedTypeName %}{% if param.typeName.isOptional %}{% endif%}{{ ', ' if not forloop.last }}{% endfor %})?
    var {% call swiftifyMethodNameV2 method %}ReceivedInvocations: [({% for param in method.parameters %}{{ param.name }}: {% call GenericTestedParam GenericParameters param.unwrappedTypeName %}{% if param.typeName.isOptional %}{% endif%}{{ ', ' if not forloop.last }}{% endfor %})] = []
            {% endif %}
            {% if not method.returnTypeName.isVoid and not method.isInitializer %}
    var {% call swiftifyMethodNameV2 method %}ReturnValue: {{ '(' if method.returnTypeName.isClosure and not method.isOptionalReturnType }}{{ '(' if method.returnTypeName|contains:"any" }}{% call GenericTestedParam GenericParameters method.returnTypeName.unwrappedTypeName %}{% if method.returnTypeName.isOptional %}?{% endif%}{{ ')' if method.returnTypeName.isClosure and not method.isOptionalReturnType }}{{ '!' if not method.isOptionalReturnType }}
            {% endif %}
            {% call methodClosureDeclarationV2 method GenericParameters %}

        {% endif %}
    {% endfor %}
{% else %}
    {% if method.throws %}
        {% call methodThrowableErrorDeclaration method %}
    {% endif %}
    {% if not method.isInitializer %}
    var {% call swiftifyMethodNameV2 method %}CallsCount = 0
    var {% call swiftifyMethodNameV2 method %}Called: Bool {
        return {% call swiftifyMethodNameV2 method %}CallsCount > 0
    }
    {% endif %}
    {% if method.parameters.count == 1 %}
    var {% call swiftifyMethodNameV2 method %}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }}: {{ '(' if param.isClosure }}{{ param.typeName.unwrappedTypeName }}{{ ')' if param.isClosure }}?{% endfor %}
    var {% call swiftifyMethodNameV2 method %}ReceivedInvocations{% for param in method.parameters %}: [{{ '(' if param.isClosure }}{{ param.typeName.unwrappedTypeName }}{{ ')' if param.isClosure }}{%if param.typeName.isOptional%}?{%endif%}]{% endfor %} = []
    {% elif not method.parameters.count == 0 %}
    var {% call swiftifyMethodNameV2 method %}ReceivedArguments: ({% for param in method.parameters %}{{ param.name }}: {{ param.unwrappedTypeName if param.typeAttributes.escaping else param.typeName }}{{ ', ' if not forloop.last }}{% endfor %})?
    var {% call swiftifyMethodNameV2 method %}ReceivedInvocations: [({% for param in method.parameters %}{{ param.name }}: {{ param.unwrappedTypeName if param.typeAttributes.escaping else param.typeName }}{{ ', ' if not forloop.last }}{% endfor %})] = []
    {% endif %}
    {% if not method.returnTypeName.isVoid and not method.isInitializer %}
    var {% call swiftifyMethodNameV2 method %}ReturnValue: {{ '(' if method.returnTypeName.isClosure and not method.isOptionalReturnType or method.returnTypeName|contains:"any"}}{{ method.returnTypeName }}{{ ')' if method.returnTypeName.isClosure and not method.isOptionalReturnType or method.returnTypeName|contains:"any"}}{% if not method.returnTypeName.isClosure and not method.isOptionalReturnType %}{% call methodReturnValueDefaultValueMacro method.actualReturnTypeName %}{% endif %}
    {% endif %}
    {% call methodClosureDeclaration method %}
{% endif %}
{% if method.isInitializer %}
    required {{ method.name }} {
        {% call methodReceivedParameters method %}
        {% call methodClosureName method %}?({% call methodClosureCallParameters method %})
    }
{% else %}
    func {% if method.name|contains:"any" and method.name|contains:"?" %}{{ method.name | replace:"any","(any" | replace:"?",")?" }}{%else%}{{ method.name }}{%endif%}{{ ' async' if method.isAsync }}{{ ' throws' if method.throws }}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
    {% if not method.shortName| hasSuffix:">" %}
        {% if method.throws %}
        {% call methodThrowableErrorUsage method %}
        {% endif %}
        {% call swiftifyMethodNameV2 method %}CallsCount += 1
        {% call methodReceivedParameters method %}
        {% if method.returnTypeName.isVoid %}
        {% if method.throws %}try {% endif %}{% call methodClosureName method %}?({% call methodClosureCallParameters method %})
        {% else %}
        return {{ 'try ' if method.throws }}{% call methodClosureName method %}.map({ {{ 'try ' if method.throws }}$0({% call methodClosureCallParameters method %}) }) ?? {% call swiftifyMethodNameV2 method %}ReturnValue
        {% endif %}
        {% else %}
        {% call swiftifyMethodNameV2 method %}CallsCount += 1
        {% call methodReceivedParameters method %}
        {% if not method.returnTypeName.isVoid %}
        return ({{ 'try ' if method.throws }}{% call methodClosureName method %}.map({ {{ 'try' if method.throws }} $0({% call methodClosureCallParameters method %}) }) ?? {% call swiftifyMethodNameV2 method %}ReturnValue) as! {{method.returnTypeName}}
        {% else %}
        {{ 'try ' if method.throws }}{% call methodClosureName method %}?({% call methodClosureCallParameters method %})
        {% endif %}
        {% endif %}
    }

{% endif %}
{% endmacro %}
{% macro mockOptionalVariable variable %}
    var {% call mockedVariableName variable %}: {{ variable.typeName }}
{% endmacro %}
{% macro mockNonOptionalArrayOrDictionaryVariable variable %}
    var {% call mockedVariableName variable %}: {{ variable.typeName }} = {% if variable.isArray %}[]{% elif variable.isDictionary %}[:]{% endif %}
{% endmacro %}
{% macro initEmptyClosureForClosureWithVoidReturnType variable %}{% if variable.typeName.closure.returnTypeName.isVoid%} = { {% for param in variable.typeName.closure.parameters %} _{% if not forloop.last %},{% endif %}{% endfor %} in }{% else %}!{% endif %}
{% endmacro %}
{% macro underlyingVariableDefaultValueMacro typeName %}{% if typeName.name == "Int" or typeName.name == "UInt" or typeName.name == "Double" or typeName.name == "Float" or typeName.name == "CGFloat" %} = 0{% elif typeName.name == "Bool" %} = false{% elif typeName.name == "String" %} = ""{% elif typeName.name == "UIViewController" or typeName.name == "UINavigationController" or typeName.name == "UIView" or typeName.name|hasPrefix:"PassthroughSubject<" or typeName.name|hasPrefix:"PassthroughRelay<" %} = .init(){% elif typeName.name == "URL" %} = .init(fileURLWithPath: ""){% elif typeName.name == "URLRequest" %} = .init(url: .init(fileURLWithPath: "")){% elif typeName.name|hasPrefix:"AnyPublisher<" %} = Empty().eraseToAnyPublisher(){% elif typeName.isArray %} = []{% elif typeName.isDictionary %} = [:]{% elif typeName.name == "UIColor" %} = .clear{% elif typeName.name == "Color" %} = .clear{% elif typeName.name == "UIFont" %} = .init(){% elif typeName.name == "Font" %} = .body{% else %}!{% endif %}
{% endmacro %}
{% macro underlyingVariableValue variable %}
    var {% call underlyingMockedVariableName variable %}: {% if variable.typeName|contains:"any" %}{{ variable.typeName | replace:"any","(any" }}){% else %}{{ variable.typeName }}{% endif %}{% if variable.typeName.closure.returnTypeName.isVoid%} = { {% for param in variable.typeName.closure.parameters %}_{% if not forloop.last %}, {% endif %}{% endfor %}{% if not variable.typeName.closure.parameters.count == 0%} in{% endif %} }{% else %}{% call underlyingVariableDefaultValueMacro variable.actualTypeName %}{% endif %}
{% endmacro %}
{% macro mockNonOptionalVariable variable %}
    {% call underlyingVariableValue variable %}
    var {% call mockedVariableName variable %}: {{ variable.typeName }} {
        get { return {% call underlyingMockedVariableName variable %} }
        set(value) { {% call underlyingMockedVariableName variable %} = value }
    }
{% endmacro %}
{% macro underlyingMockedVariableName variable %}underlying{{ variable.name|upperFirstLetter }}{% endmacro %}
{% macro mockedVariableName variable %}{{ variable.name }}{% endmacro %}
{% for type in types.protocols where type.based.AutoMockable or type|annotated:"AutoMockable" %}{% if type.name != "AutoMockable" %}

final class {{ type.name }}GeneratedMock: {{ import }}.{{ type.name }} {

{% for variable in type.allVariables|!definedInExtension %}
    {% if variable.isOptional %}{% call mockOptionalVariable variable %}{% elif variable.isArray or variable.isDictionary %}{% call mockNonOptionalArrayOrDictionaryVariable variable %}{% else %}{% call mockNonOptionalVariable variable %}{% endif %}
{% endfor %}
    init() {}

{% for method in type.allMethods|!definedInExtension %}
    {% call mockMethod method %}
{% endfor %}
}

extension  {{ type.name }}GeneratedMock: ResetGeneratedMock {

    func reset() {
    {% for method in type.allMethods|!definedInExtension %}

        {% call swiftifyMethodNameV2 method %}CallsCount = 0
        {% if method.parameters.count == 1 %}
            {% call swiftifyMethodNameV2 method %}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }} = nil {% endfor %}
        {% elif not method.parameters.count == 0 %}
            {% call swiftifyMethodNameV2 method %}ReceivedArguments = nil
        {% endif %}
        {% call swiftifyMethodNameV2 method %}ReceivedInvocations = []
    {% endfor %}
    }
}
{% endif %}{% endfor %}

{% endfor %}
protocol ResetGeneratedMock {
    func reset()
}